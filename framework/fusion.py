#!/usr/bin/python
# -*- coding: utf-8 -*-

###############################################################################
# This file is part of Kuaa.
#
# Kuaa is a framework for the automation of machine learning experiments.
#
# It provides a workflow-based standardized environment for easy evaluation of
# feature descriptors, normalization techniques, classifiers and fusion
# approaches.
#
# Techniques of each kind can be easily plugged into the framework as they can
# be implemented as plugins, with standardized inputs and outputs.
# The framework also provides a recommendation module in order to help
# inexperienced researchers in choosing adequate or alternative techniques for
# experiments.
#
# Copyright (C) 2016 under the GNU General Public License Version 3.
#
# This framework was developed during the research collaboration of Institute
# of Computing (University of Campinas, Brazil) and Samsung Eletrônica da
# Amazônia Ltda. entitled "Pattern recognition and classification by feature
# engineering, *-fusion, open-set recognition, and meta-recognition", which was
# sponsored by Samsung.
#
# This framework is provided "as is" without any guarantees or warranty. The
# authors make no warranties, express of implied, that they are free of error,
# or they will meet your requirements for any particular application.
#
# The framework was developed to be used for educational and research purposes.
# It is expressly prohibited to use for any commercial purposes.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

#Future
from __future__ import division

#Python imports
import os
import sys
from datetime import datetime, timedelta
import socket

#Framework imports
import config
    
#CONSTANTS
POS_CLASSES = 0
POS_FV = 1
START = config.MESSAGE_MODULE_START
PROGRESS = config.MESSAGE_MODULE_PROGRESS

def main(list_images, list_classes, list_train_test, classes_list,
        experiment_folder, fusion_method, parameters, node_id):
    """
    Module that performs the fusion methods of the framework.
    
    Parameters
    ----------
        list_images : list of dict
            List of images dictionary, where the dictionary have each
            (key, value) pair corresponds to the path to an item in the
            database and a list of structures indexed by the item's path,
            respectively. Each image dictionary comes from a input of the
            fusion module.
            
        list_classes : list of dict
            List of classes dictionary, where the dictionary have each
            (key, value) pair corresponds to a class in the database and a list
            of paths to the items associated with that class, respectively.
            Each image dictionary comes from a input of the fusion module.
        
        list_train_test : list of list
            List of the datasets splits to be used in the experiment, with 
            each entry containing the training and testing sets.
            For example, train_test_list[i][POS_TRAIN] is a list of paths of
            items in the training set for the i'th split, while
            train_test_list[i][POS_TEST] is the testing set for the same split.
            
        classes_list : list of list
            List of list of classes for each image for each train test set.
        
        experiment_folder : string
            String with the path to the experiment folder, where the files of the
            experiment will be saved.
        
        fusion_method : string
            Name of the fusion method plugin.
        
        parameters : dict, {string: string}
            Dictionary with the plugin-specific parameters, extracted from the
            experiment's xml.
        
        node_id : string
            ID of the classifier plugin node in the experiment.
    
    Returns
    -------
        images : dict, {string : [list, list]}
            Dictionary containing, for each image path, the classes of the
            image and the feature vectors/predict results.
            
        classes : dict, {string : [list of string]}
            A dictionary where each (key, value) pair corresponds to a class in
            the database and a list of paths to the items associated with that
            class, respectively.
        
        train_test : list of list
            List of the splits generated by the plugin, with each entry
            containing the training and testing sets.
            
        fusion_time : float
            Time taken to execute this function.
            
    """
    
    #Send the start of the module
    try:
        socket_framework.sendall("%s %s///" % (START, node_id))
    except:
        pass
    
    #Time calculation of the classification
    init_fusion = datetime.now()
    
    print "Fusion Module"
    
    #Paths
    fusion_path = os.path.abspath(os.path.join(os.path.dirname(__file__), \
                                  "..", "fusion_methods", fusion_method))

    experiment_folder = experiment_folder + "iteration:" + str(iteration) + \
            "-fusion_method-id:" + node_id + "-" + fusion_method + "_"
    
    #Import the plugin of the fusion method
    sys.path.append(fusion_path)
    software = __import__("plugin_" + fusion_method)
    print software
    
    images, classes, train_test = software.fusion(list_images, list_classes,
            list_train_test, classes_list, experiment_folder, parameters)
    
    #Send to the socket the train and test that was fused
    try:
        socket_framework.sendall("%s %s %f///" % (PROGRESS, node_id, 1.0))
    except:
        pass
    
    #Time calculation of the classification
    end_fusion = datetime.now()
    fusion_time = end_fusion - init_fusion
    fusion_time = fusion_time.total_seconds()
    print "Total fusion time:", fusion_time, "seconds."
    
    return images, classes, train_test, fusion_time
